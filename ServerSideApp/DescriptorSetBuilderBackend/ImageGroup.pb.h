// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageGroup.proto

#ifndef PROTOBUF_ImageGroup_2eproto__INCLUDED
#define PROTOBUF_ImageGroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace sas04225 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ImageGroup_2eproto();
void protobuf_AssignDesc_ImageGroup_2eproto();
void protobuf_ShutdownFile_ImageGroup_2eproto();

class ImageGroup;

// ===================================================================

class ImageGroup : public ::google::protobuf::Message {
 public:
  ImageGroup();
  virtual ~ImageGroup();
  
  ImageGroup(const ImageGroup& from);
  
  inline ImageGroup& operator=(const ImageGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageGroup& default_instance();
  
  void Swap(ImageGroup* other);
  
  // implements Message ----------------------------------------------
  
  ImageGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageGroup& from);
  void MergeFrom(const ImageGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_name = 1;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 1;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  
  // repeated string images = 2;
  inline int images_size() const;
  inline void clear_images();
  static const int kImagesFieldNumber = 2;
  inline const ::std::string& images(int index) const;
  inline ::std::string* mutable_images(int index);
  inline void set_images(int index, const ::std::string& value);
  inline void set_images(int index, const char* value);
  inline void set_images(int index, const char* value, size_t size);
  inline ::std::string* add_images();
  inline void add_images(const ::std::string& value);
  inline void add_images(const char* value);
  inline void add_images(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& images() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_images();
  
  // @@protoc_insertion_point(class_scope:org.sas04225.proto.ImageGroup)
 private:
  inline void set_has_group_name();
  inline void clear_has_group_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> images_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ImageGroup_2eproto();
  friend void protobuf_AssignDesc_ImageGroup_2eproto();
  friend void protobuf_ShutdownFile_ImageGroup_2eproto();
  
  void InitAsDefaultInstance();
  static ImageGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageGroup

// required string group_name = 1;
inline bool ImageGroup::has_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageGroup::set_has_group_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageGroup::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageGroup::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& ImageGroup::group_name() const {
  return *group_name_;
}
inline void ImageGroup::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ImageGroup::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ImageGroup::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageGroup::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* ImageGroup::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string images = 2;
inline int ImageGroup::images_size() const {
  return images_.size();
}
inline void ImageGroup::clear_images() {
  images_.Clear();
}
inline const ::std::string& ImageGroup::images(int index) const {
  return images_.Get(index);
}
inline ::std::string* ImageGroup::mutable_images(int index) {
  return images_.Mutable(index);
}
inline void ImageGroup::set_images(int index, const ::std::string& value) {
  images_.Mutable(index)->assign(value);
}
inline void ImageGroup::set_images(int index, const char* value) {
  images_.Mutable(index)->assign(value);
}
inline void ImageGroup::set_images(int index, const char* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageGroup::add_images() {
  return images_.Add();
}
inline void ImageGroup::add_images(const ::std::string& value) {
  images_.Add()->assign(value);
}
inline void ImageGroup::add_images(const char* value) {
  images_.Add()->assign(value);
}
inline void ImageGroup::add_images(const char* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageGroup::images() const {
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageGroup::mutable_images() {
  return &images_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sas04225
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ImageGroup_2eproto__INCLUDED
