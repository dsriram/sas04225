// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LookupQuery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace sas04225 {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LookupQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LookupQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Descriptors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Descriptors_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LookupQuery_2eproto() {
  protobuf_AddDesc_LookupQuery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LookupQuery.proto");
  GOOGLE_CHECK(file != NULL);
  LookupQuery_descriptor_ = file->message_type(0);
  static const int LookupQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupQuery, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupQuery, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupQuery, descriptors_),
  };
  LookupQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LookupQuery_descriptor_,
      LookupQuery::default_instance_,
      LookupQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LookupQuery));
  Descriptors_descriptor_ = file->message_type(1);
  static const int Descriptors_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Descriptors, descriptor_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Descriptors, descriptors_),
  };
  Descriptors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Descriptors_descriptor_,
      Descriptors::default_instance_,
      Descriptors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Descriptors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Descriptors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Descriptors));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LookupQuery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LookupQuery_descriptor_, &LookupQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Descriptors_descriptor_, &Descriptors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LookupQuery_2eproto() {
  delete LookupQuery::default_instance_;
  delete LookupQuery_reflection_;
  delete Descriptors::default_instance_;
  delete Descriptors_reflection_;
}

void protobuf_AddDesc_LookupQuery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LookupQuery.proto\022\022org.sas04225.proto\""
    "e\n\013LookupQuery\022\022\n\nrequest_id\030\001 \002(\004\022\014\n\004pa"
    "th\030\002 \002(\t\0224\n\013descriptors\030\003 \002(\0132\037.org.sas0"
    "4225.proto.Descriptors\";\n\013Descriptors\022\027\n"
    "\017descriptor_size\030\001 \002(\r\022\023\n\013descriptors\030\002 "
    "\003(\014B&\n\022org.sas04225.protoB\020LookupQueryPr"
    "oto", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LookupQuery.proto", &protobuf_RegisterTypes);
  LookupQuery::default_instance_ = new LookupQuery();
  Descriptors::default_instance_ = new Descriptors();
  LookupQuery::default_instance_->InitAsDefaultInstance();
  Descriptors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LookupQuery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LookupQuery_2eproto {
  StaticDescriptorInitializer_LookupQuery_2eproto() {
    protobuf_AddDesc_LookupQuery_2eproto();
  }
} static_descriptor_initializer_LookupQuery_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LookupQuery::kRequestIdFieldNumber;
const int LookupQuery::kPathFieldNumber;
const int LookupQuery::kDescriptorsFieldNumber;
#endif  // !_MSC_VER

LookupQuery::LookupQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LookupQuery::InitAsDefaultInstance() {
  descriptors_ = const_cast< ::org::sas04225::proto::Descriptors*>(&::org::sas04225::proto::Descriptors::default_instance());
}

LookupQuery::LookupQuery(const LookupQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LookupQuery::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  descriptors_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupQuery::~LookupQuery() {
  SharedDtor();
}

void LookupQuery::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete descriptors_;
  }
}

void LookupQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LookupQuery_descriptor_;
}

const LookupQuery& LookupQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LookupQuery_2eproto();  return *default_instance_;
}

LookupQuery* LookupQuery::default_instance_ = NULL;

LookupQuery* LookupQuery::New() const {
  return new LookupQuery;
}

void LookupQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_descriptors()) {
      if (descriptors_ != NULL) descriptors_->::org::sas04225::proto::Descriptors::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LookupQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_descriptors;
        break;
      }
      
      // required .org.sas04225.proto.Descriptors descriptors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_descriptors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LookupQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  // required .org.sas04225.proto.Descriptors descriptors = 3;
  if (has_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->descriptors(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LookupQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  // required .org.sas04225.proto.Descriptors descriptors = 3;
  if (has_descriptors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->descriptors(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LookupQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }
    
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required .org.sas04225.proto.Descriptors descriptors = 3;
    if (has_descriptors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptors());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LookupQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LookupQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LookupQuery::MergeFrom(const LookupQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_descriptors()) {
      mutable_descriptors()->::org::sas04225::proto::Descriptors::MergeFrom(from.descriptors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LookupQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupQuery::CopyFrom(const LookupQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_descriptors()) {
    if (!this->descriptors().IsInitialized()) return false;
  }
  return true;
}

void LookupQuery::Swap(LookupQuery* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(path_, other->path_);
    std::swap(descriptors_, other->descriptors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LookupQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LookupQuery_descriptor_;
  metadata.reflection = LookupQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Descriptors::kDescriptorSizeFieldNumber;
const int Descriptors::kDescriptorsFieldNumber;
#endif  // !_MSC_VER

Descriptors::Descriptors()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Descriptors::InitAsDefaultInstance() {
}

Descriptors::Descriptors(const Descriptors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Descriptors::SharedCtor() {
  _cached_size_ = 0;
  descriptor_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Descriptors::~Descriptors() {
  SharedDtor();
}

void Descriptors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Descriptors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Descriptors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Descriptors_descriptor_;
}

const Descriptors& Descriptors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LookupQuery_2eproto();  return *default_instance_;
}

Descriptors* Descriptors::default_instance_ = NULL;

Descriptors* Descriptors::New() const {
  return new Descriptors;
}

void Descriptors::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descriptor_size_ = 0u;
  }
  descriptors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Descriptors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 descriptor_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &descriptor_size_)));
          set_has_descriptor_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptors;
        break;
      }
      
      // repeated bytes descriptors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_descriptors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Descriptors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 descriptor_size = 1;
  if (has_descriptor_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->descriptor_size(), output);
  }
  
  // repeated bytes descriptors = 2;
  for (int i = 0; i < this->descriptors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->descriptors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Descriptors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 descriptor_size = 1;
  if (has_descriptor_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->descriptor_size(), target);
  }
  
  // repeated bytes descriptors = 2;
  for (int i = 0; i < this->descriptors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->descriptors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Descriptors::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 descriptor_size = 1;
    if (has_descriptor_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->descriptor_size());
    }
    
  }
  // repeated bytes descriptors = 2;
  total_size += 1 * this->descriptors_size();
  for (int i = 0; i < this->descriptors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->descriptors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Descriptors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Descriptors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Descriptors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Descriptors::MergeFrom(const Descriptors& from) {
  GOOGLE_CHECK_NE(&from, this);
  descriptors_.MergeFrom(from.descriptors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_descriptor_size()) {
      set_descriptor_size(from.descriptor_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Descriptors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Descriptors::CopyFrom(const Descriptors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Descriptors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Descriptors::Swap(Descriptors* other) {
  if (other != this) {
    std::swap(descriptor_size_, other->descriptor_size_);
    descriptors_.Swap(&other->descriptors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Descriptors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Descriptors_descriptor_;
  metadata.reflection = Descriptors_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sas04225
}  // namespace org

// @@protoc_insertion_point(global_scope)
