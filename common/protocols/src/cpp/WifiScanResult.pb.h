// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WifiScanResult.proto

#ifndef PROTOBUF_WifiScanResult_2eproto__INCLUDED
#define PROTOBUF_WifiScanResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace sas04225 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WifiScanResult_2eproto();
void protobuf_AssignDesc_WifiScanResult_2eproto();
void protobuf_ShutdownFile_WifiScanResult_2eproto();

class WifiScanResult;
class AccessPoint;

// ===================================================================

class WifiScanResult : public ::google::protobuf::Message {
 public:
  WifiScanResult();
  virtual ~WifiScanResult();
  
  WifiScanResult(const WifiScanResult& from);
  
  inline WifiScanResult& operator=(const WifiScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WifiScanResult& default_instance();
  
  void Swap(WifiScanResult* other);
  
  // implements Message ----------------------------------------------
  
  WifiScanResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WifiScanResult& from);
  void MergeFrom(const WifiScanResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string location_tag = 1;
  inline bool has_location_tag() const;
  inline void clear_location_tag();
  static const int kLocationTagFieldNumber = 1;
  inline const ::std::string& location_tag() const;
  inline void set_location_tag(const ::std::string& value);
  inline void set_location_tag(const char* value);
  inline void set_location_tag(const char* value, size_t size);
  inline ::std::string* mutable_location_tag();
  inline ::std::string* release_location_tag();
  
  // repeated .org.sas04225.AccessPoint result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::org::sas04225::AccessPoint& result(int index) const;
  inline ::org::sas04225::AccessPoint* mutable_result(int index);
  inline ::org::sas04225::AccessPoint* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::org::sas04225::AccessPoint >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::sas04225::AccessPoint >*
      mutable_result();
  
  // @@protoc_insertion_point(class_scope:org.sas04225.WifiScanResult)
 private:
  inline void set_has_location_tag();
  inline void clear_has_location_tag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* location_tag_;
  ::google::protobuf::RepeatedPtrField< ::org::sas04225::AccessPoint > result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_WifiScanResult_2eproto();
  friend void protobuf_AssignDesc_WifiScanResult_2eproto();
  friend void protobuf_ShutdownFile_WifiScanResult_2eproto();
  
  void InitAsDefaultInstance();
  static WifiScanResult* default_instance_;
};
// -------------------------------------------------------------------

class AccessPoint : public ::google::protobuf::Message {
 public:
  AccessPoint();
  virtual ~AccessPoint();
  
  AccessPoint(const AccessPoint& from);
  
  inline AccessPoint& operator=(const AccessPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessPoint& default_instance();
  
  void Swap(AccessPoint* other);
  
  // implements Message ----------------------------------------------
  
  AccessPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessPoint& from);
  void MergeFrom(const AccessPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string bssid = 1;
  inline bool has_bssid() const;
  inline void clear_bssid();
  static const int kBssidFieldNumber = 1;
  inline const ::std::string& bssid() const;
  inline void set_bssid(const ::std::string& value);
  inline void set_bssid(const char* value);
  inline void set_bssid(const char* value, size_t size);
  inline ::std::string* mutable_bssid();
  inline ::std::string* release_bssid();
  
  // required sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:org.sas04225.AccessPoint)
 private:
  inline void set_has_bssid();
  inline void clear_has_bssid();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bssid_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_WifiScanResult_2eproto();
  friend void protobuf_AssignDesc_WifiScanResult_2eproto();
  friend void protobuf_ShutdownFile_WifiScanResult_2eproto();
  
  void InitAsDefaultInstance();
  static AccessPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// WifiScanResult

// required string location_tag = 1;
inline bool WifiScanResult::has_location_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiScanResult::set_has_location_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WifiScanResult::clear_has_location_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WifiScanResult::clear_location_tag() {
  if (location_tag_ != &::google::protobuf::internal::kEmptyString) {
    location_tag_->clear();
  }
  clear_has_location_tag();
}
inline const ::std::string& WifiScanResult::location_tag() const {
  return *location_tag_;
}
inline void WifiScanResult::set_location_tag(const ::std::string& value) {
  set_has_location_tag();
  if (location_tag_ == &::google::protobuf::internal::kEmptyString) {
    location_tag_ = new ::std::string;
  }
  location_tag_->assign(value);
}
inline void WifiScanResult::set_location_tag(const char* value) {
  set_has_location_tag();
  if (location_tag_ == &::google::protobuf::internal::kEmptyString) {
    location_tag_ = new ::std::string;
  }
  location_tag_->assign(value);
}
inline void WifiScanResult::set_location_tag(const char* value, size_t size) {
  set_has_location_tag();
  if (location_tag_ == &::google::protobuf::internal::kEmptyString) {
    location_tag_ = new ::std::string;
  }
  location_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WifiScanResult::mutable_location_tag() {
  set_has_location_tag();
  if (location_tag_ == &::google::protobuf::internal::kEmptyString) {
    location_tag_ = new ::std::string;
  }
  return location_tag_;
}
inline ::std::string* WifiScanResult::release_location_tag() {
  clear_has_location_tag();
  if (location_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = location_tag_;
    location_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .org.sas04225.AccessPoint result = 2;
inline int WifiScanResult::result_size() const {
  return result_.size();
}
inline void WifiScanResult::clear_result() {
  result_.Clear();
}
inline const ::org::sas04225::AccessPoint& WifiScanResult::result(int index) const {
  return result_.Get(index);
}
inline ::org::sas04225::AccessPoint* WifiScanResult::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::org::sas04225::AccessPoint* WifiScanResult::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::sas04225::AccessPoint >&
WifiScanResult::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::sas04225::AccessPoint >*
WifiScanResult::mutable_result() {
  return &result_;
}

// -------------------------------------------------------------------

// AccessPoint

// required string bssid = 1;
inline bool AccessPoint::has_bssid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessPoint::set_has_bssid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessPoint::clear_has_bssid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessPoint::clear_bssid() {
  if (bssid_ != &::google::protobuf::internal::kEmptyString) {
    bssid_->clear();
  }
  clear_has_bssid();
}
inline const ::std::string& AccessPoint::bssid() const {
  return *bssid_;
}
inline void AccessPoint::set_bssid(const ::std::string& value) {
  set_has_bssid();
  if (bssid_ == &::google::protobuf::internal::kEmptyString) {
    bssid_ = new ::std::string;
  }
  bssid_->assign(value);
}
inline void AccessPoint::set_bssid(const char* value) {
  set_has_bssid();
  if (bssid_ == &::google::protobuf::internal::kEmptyString) {
    bssid_ = new ::std::string;
  }
  bssid_->assign(value);
}
inline void AccessPoint::set_bssid(const char* value, size_t size) {
  set_has_bssid();
  if (bssid_ == &::google::protobuf::internal::kEmptyString) {
    bssid_ = new ::std::string;
  }
  bssid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessPoint::mutable_bssid() {
  set_has_bssid();
  if (bssid_ == &::google::protobuf::internal::kEmptyString) {
    bssid_ = new ::std::string;
  }
  return bssid_;
}
inline ::std::string* AccessPoint::release_bssid() {
  clear_has_bssid();
  if (bssid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bssid_;
    bssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 level = 2;
inline bool AccessPoint::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessPoint::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessPoint::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessPoint::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 AccessPoint::level() const {
  return level_;
}
inline void AccessPoint::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sas04225
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WifiScanResult_2eproto__INCLUDED
