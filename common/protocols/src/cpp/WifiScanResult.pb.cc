// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WifiScanResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace sas04225 {

namespace {

const ::google::protobuf::Descriptor* WifiScanResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WifiScanResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WifiScanResult_2eproto() {
  protobuf_AddDesc_WifiScanResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WifiScanResult.proto");
  GOOGLE_CHECK(file != NULL);
  WifiScanResult_descriptor_ = file->message_type(0);
  static const int WifiScanResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiScanResult, location_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiScanResult, result_),
  };
  WifiScanResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WifiScanResult_descriptor_,
      WifiScanResult::default_instance_,
      WifiScanResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiScanResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiScanResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WifiScanResult));
  AccessPoint_descriptor_ = file->message_type(1);
  static const int AccessPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessPoint, bssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessPoint, level_),
  };
  AccessPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessPoint_descriptor_,
      AccessPoint::default_instance_,
      AccessPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WifiScanResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WifiScanResult_descriptor_, &WifiScanResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessPoint_descriptor_, &AccessPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WifiScanResult_2eproto() {
  delete WifiScanResult::default_instance_;
  delete WifiScanResult_reflection_;
  delete AccessPoint::default_instance_;
  delete AccessPoint_reflection_;
}

void protobuf_AddDesc_WifiScanResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WifiScanResult.proto\022\014org.sas04225\"Q\n\016"
    "WifiScanResult\022\024\n\014location_tag\030\001 \002(\t\022)\n\006"
    "result\030\002 \003(\0132\031.org.sas04225.AccessPoint\""
    "+\n\013AccessPoint\022\r\n\005bssid\030\001 \002(\t\022\r\n\005level\030\002"
    " \002(\021B)\n\022org.sas04225.protoB\023WifiScanResu"
    "ltProto", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WifiScanResult.proto", &protobuf_RegisterTypes);
  WifiScanResult::default_instance_ = new WifiScanResult();
  AccessPoint::default_instance_ = new AccessPoint();
  WifiScanResult::default_instance_->InitAsDefaultInstance();
  AccessPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WifiScanResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WifiScanResult_2eproto {
  StaticDescriptorInitializer_WifiScanResult_2eproto() {
    protobuf_AddDesc_WifiScanResult_2eproto();
  }
} static_descriptor_initializer_WifiScanResult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WifiScanResult::kLocationTagFieldNumber;
const int WifiScanResult::kResultFieldNumber;
#endif  // !_MSC_VER

WifiScanResult::WifiScanResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WifiScanResult::InitAsDefaultInstance() {
}

WifiScanResult::WifiScanResult(const WifiScanResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WifiScanResult::SharedCtor() {
  _cached_size_ = 0;
  location_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiScanResult::~WifiScanResult() {
  SharedDtor();
}

void WifiScanResult::SharedDtor() {
  if (location_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete location_tag_;
  }
  if (this != default_instance_) {
  }
}

void WifiScanResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WifiScanResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WifiScanResult_descriptor_;
}

const WifiScanResult& WifiScanResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WifiScanResult_2eproto();  return *default_instance_;
}

WifiScanResult* WifiScanResult::default_instance_ = NULL;

WifiScanResult* WifiScanResult::New() const {
  return new WifiScanResult;
}

void WifiScanResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location_tag()) {
      if (location_tag_ != &::google::protobuf::internal::kEmptyString) {
        location_tag_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiScanResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string location_tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_tag().data(), this->location_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // repeated .org.sas04225.AccessPoint result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiScanResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string location_tag = 1;
  if (has_location_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_tag().data(), this->location_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->location_tag(), output);
  }
  
  // repeated .org.sas04225.AccessPoint result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WifiScanResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string location_tag = 1;
  if (has_location_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_tag().data(), this->location_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location_tag(), target);
  }
  
  // repeated .org.sas04225.AccessPoint result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WifiScanResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string location_tag = 1;
    if (has_location_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_tag());
    }
    
  }
  // repeated .org.sas04225.AccessPoint result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiScanResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WifiScanResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WifiScanResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WifiScanResult::MergeFrom(const WifiScanResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_tag()) {
      set_location_tag(from.location_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiScanResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiScanResult::CopyFrom(const WifiScanResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiScanResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void WifiScanResult::Swap(WifiScanResult* other) {
  if (other != this) {
    std::swap(location_tag_, other->location_tag_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WifiScanResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WifiScanResult_descriptor_;
  metadata.reflection = WifiScanResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessPoint::kBssidFieldNumber;
const int AccessPoint::kLevelFieldNumber;
#endif  // !_MSC_VER

AccessPoint::AccessPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccessPoint::InitAsDefaultInstance() {
}

AccessPoint::AccessPoint(const AccessPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccessPoint::SharedCtor() {
  _cached_size_ = 0;
  bssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessPoint::~AccessPoint() {
  SharedDtor();
}

void AccessPoint::SharedDtor() {
  if (bssid_ != &::google::protobuf::internal::kEmptyString) {
    delete bssid_;
  }
  if (this != default_instance_) {
  }
}

void AccessPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessPoint_descriptor_;
}

const AccessPoint& AccessPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WifiScanResult_2eproto();  return *default_instance_;
}

AccessPoint* AccessPoint::default_instance_ = NULL;

AccessPoint* AccessPoint::New() const {
  return new AccessPoint;
}

void AccessPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bssid()) {
      if (bssid_ != &::google::protobuf::internal::kEmptyString) {
        bssid_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bssid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bssid().data(), this->bssid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required sint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bssid = 1;
  if (has_bssid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bssid().data(), this->bssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bssid(), output);
  }
  
  // required sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccessPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bssid = 1;
  if (has_bssid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bssid().data(), this->bssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bssid(), target);
  }
  
  // required sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccessPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bssid = 1;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bssid());
    }
    
    // required sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessPoint::MergeFrom(const AccessPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bssid()) {
      set_bssid(from.bssid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessPoint::CopyFrom(const AccessPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AccessPoint::Swap(AccessPoint* other) {
  if (other != this) {
    std::swap(bssid_, other->bssid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessPoint_descriptor_;
  metadata.reflection = AccessPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sas04225
}  // namespace org

// @@protoc_insertion_point(global_scope)
